from random import *

class Unit:
    def __init__(self, name, hp, speed):
        self.name = name
        self.hp = hp 
        self.speed = speed
        print("{0} 유닛이 생성되었습니다.".format(name))
    
    def move(self, location):
        print("[지상유닛 이동]")
        print("{0} : {1} 방향으로 이동  [속도 {2}]"\
            .format(self.name, location, self.speed))        


    def damaged(self, damage):
        print("{0} : {1} 체력 저하".format(self.name, damage))
        self.hp -= damage
        print("{0} : 현재 체력은 {1} 입니다".format(self.name, self.hp))
        if self.hp <= 0:
            print("{0} : 파괴되었습니다".format(self.name))
 

class AttackUnit(Unit):
     def __init__(self, name, hp, speed, damage):
        Unit.__init__(self, name, hp, speed)
        self.damage = damage


     def attack(self, location):
        print("{0} : {1} 방향으로 이동한다 [공격력 {2}]"\
            .format(self.name, location, self.damage))

#마린   
class Marine(AttackUnit):
    def __init__(self):
        AttackUnit.__init__(self, "마린", 40, 1, 5)

    #스핌팩(체력 10 감소)
    def stimpack(self):
        if self.hp > 10:
            self.hp -= 10
            print("{0} : 스팀팩 사용".format(self.name))
        else:
            print("{0} : 사용할 수 없습니다.".format(self.name))


#탱크
class Tank(AttackUnit):

    #시즈모드
    seize = False #시즈모드 개발 여부

    def __init__(self):
        AttackUnit.__init__(self, "탱크", 150, 1, 35)
        self.seize= False
    
    def set_seize_mod(self):
        if Tank.seize == False:
            return

        #시즈모드   on  
        if self.seize == False:
            print("{0} : 시즈모드 전환".format(self.name))
            self.damage *= 2
            self.seize = True


        #시즈모드 off
        else:
            print("{0} : 탱크모드 전환".format(self.name))
            self.damage /= 2
            self.seize = False
    

#나는 기능
class Fly:
    def __init__(self, fly_speed):
        self.fly_speed = fly_speed

    def fly(self, name, location):
         print("{0} : {1} 좌표로 이동한다. [속도 {2}]".format(\
             name, location, self.fly_speed))

#공중 공격 유닛 클래스 
class Fa(AttackUnit, Fly):
    def __init__(self, name, hp, damage, fly_speed):
        AttackUnit.__init__(self, name, hp, 0, damage) #지상 스피드는 0으로 처리
        Fly.__init__(self, fly_speed)

    def move(self, location):
        print("[공중유닛이동]")
        self.fly(self.name, location)

#레이스
class Wraith(Fa):
    def __init__(self):
        Fa.__init__(self, "레이스", 20, 2, 5)
        self.colcked = False #클로킹 모드 (해제 상태)

    def clock(self):
        if self.colcked == True: #클로킹 모드
            print("{0} 클로킹 모드 해제".format(self.name))
        else:
            print("{0} : 클로킹 모드 활성화".format(self.name))
            self.colcked = True



def game_start():
    print("[알림] 새로운 게임을 시작합니다.")

def game_over():
    print("Player : gg")
    print("[Player]님이 게임에서 나가셧습니다.")


#실제 게임 진행
game_start()

#마린 3기 생성
m1 = Marine()
m2 = Marine()
m3 = Marine()

#탱크 2기 생성
t1 = Tank()
t2 = Tank()

#레이스 1기 생성
w1 = Wraith()

#유닛 일괄 관리 (생성된 모든 유닛 append)
attack_units = []
attack_units.append(m1)
attack_units.append(m2)
attack_units.append(m3)
attack_units.append(t1)
attack_units.append(t2)
attack_units.append(w1)


#전군이동
for unit in attack_units:
    unit.move("1시")

#탱크 시즈모드 개발
Tank.seize = True
print("[알림] 탱크 시즈모드 개발 완료")

#공격 모드 준비
for unit in attack_units:
    if isinstance(unit, Marine):
        unit.stimpack()
    elif isinstance(unit, Tank):
        unit.set_seize_mod()
    elif isinstance(unit, Wraith):
        unit.clock


#전군 공격 
for unmit in attack_units:
    unit.attack("1시")

#전군피해
for unit in attack_units:
    unit.damaged(randint(5, 21))  #공격을 5~20을 받음

#게임 종료
game_over()
